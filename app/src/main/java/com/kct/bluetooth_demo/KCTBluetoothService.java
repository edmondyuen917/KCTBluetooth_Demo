package com.kct.bluetooth_demo;import android.annotation.SuppressLint;import android.app.Service;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothManager;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.os.Binder;import android.os.Environment;import android.os.IBinder;import android.support.annotation.Nullable;import android.text.TextUtils;import android.util.Log;import android.widget.Toast;import com.kct.bluetooth.KCTBluetoothManager;import com.kct.bluetooth.bean.BluetoothLeDevice;import com.kct.bluetooth.callback.IConnectListener;import com.kct.command.BLEBluetoothManager;import com.kct.command.IReceiveListener;import com.kct.command.KCTBluetoothCommand;import org.greenrobot.eventbus.EventBus;import java.util.ArrayList;import java.util.HashMap;/** * KCTBluetoothService */@SuppressLint("NewApi")public class KCTBluetoothService extends Service{    private static final String TAG = KCTBluetoothService.class.getSimpleName();    private static final Context mContext = KCTApp.getInstance().getApplicationContext();    private BluetoothManager mBluetoothManager;    private BluetoothAdapter mBluetoothAdapter;    public static boolean isDFU;   //判断是否处于DFU模式    public class LocalBinder extends Binder {        public KCTBluetoothService getService() {            return KCTBluetoothService.this;        }    }    @Nullable    @Override    public IBinder onBind(Intent intent) {        return mBinder;    }    @Override    public boolean onUnbind(Intent intent) {        return super.onUnbind(intent);    }    private final IBinder mBinder = new LocalBinder();    /**     * Initializes a reference to the local Bluetooth adapter.     *     * @return Return true if the initialization is successful.     */    public boolean initialize() {        // For API level 18 and above, get a reference to BluetoothAdapter through        // BluetoothManager.        if (mBluetoothManager == null) {            mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);            if (mBluetoothManager == null) {                Log.e(TAG, "Unable to initialize BluetoothManager.");                return false;            }        }        mBluetoothAdapter = mBluetoothManager.getAdapter();        if (mBluetoothAdapter == null) {            Log.e(TAG, "Unable to obtain a BluetoothAdapter.");            return false;        }        return true;    }    @Override    public void onCreate() {        super.onCreate();        KCTBluetoothManager.getInstance().registerListener(iConnectListener);    }    @Override    public int onStartCommand(Intent intent, int flags, int startId) {        return super.onStartCommand(intent, flags, startId);    }    @Override    public void onDestroy() {        super.onDestroy();        KCTBluetoothManager.getInstance().unregisterListener(iConnectListener);    }    private IConnectListener iConnectListener = new IConnectListener() {        @Override        public void onConnectState(int state) {   //            EventBus.getDefault().post(new MessageEvent(MessageEvent.CONNECT_STATE,state));            if(state == KCTBluetoothManager.STATE_CONNECTED) {                if (isDFU) {                    KCTBluetoothManager.getInstance().scanDevice(false);                    SharedPreferences preferences = mContext.getSharedPreferences("bluetooth", 0);                    String address = preferences.getString("address", "");                    if (!TextUtils.isEmpty(address)) {                        address = Utils.getNewMac(address);                        String path = Environment.getExternalStorageDirectory() + "/KCTBluetooth_SDK/" + "dfu.zip";                        Log.e(TAG,"upgrade_DFU");                        KCTBluetoothManager.getInstance().upgrade_DFU(path, address);                    }                }            }else if(state == 4){                try {                    Thread.sleep(2000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                if(isDFU){                    KCTBluetoothManager.getInstance().scanDevice(true);                }            }        }        @Override        public void onConnectDevice(BluetoothDevice device) {            SharedPreferences preferences = mContext.getSharedPreferences("bluetooth",0);            SharedPreferences.Editor editor = preferences.edit();            editor.putString("address",device.getAddress());            editor.putString("addressName",device.getName());            editor.commit();            EventBus.getDefault().post(new MessageEvent(MessageEvent.CONNECT_DEVICE,device));        }        @Override        public void onScanDevice(BluetoothLeDevice device) {            if(isDFU){                SharedPreferences preferences = mContext.getSharedPreferences("bluetooth",0);                String address = preferences.getString("address","");                if(!TextUtils.isEmpty(address)){                    address = Utils.getNewMac(address);                    if(address.equals(device.getDevice().getAddress())){                        Log.i(TAG,"address = " + device.getDevice().getAddress());                        KCTBluetoothManager.getInstance().connect(device.getDevice());                    }                }            }        }        @Override        public void onCommand_d2a(byte[] bytes) {            EventBus.getDefault().post(new MessageEvent(MessageEvent.RECEIVE_DATA,bytes));            KCTBluetoothCommand.getInstance().d2a_command_Parse(mContext, bytes, iReceiveCallback);        }    };    private IReceiveListener iReceiveCallback = new IReceiveListener() {        @Override        public void onReceive(int i, boolean b, Object... objects) {            if(b){                switch (i){                    case (byte)0x02:                        // BLE_COMMAND_a2d_setFlashCommand_pack response                        if(objects != null && objects.length >= 3){                            int type = (int) objects[0];                            int version = (int) objects[1];                            boolean success = (boolean) objects[2];//                            EventBus.getDefault().post(new MessageEvent(MessageEvent.FLASH_DATA,"类型 = " + (type == 0 ? "AGPS" : ":" )//                                    + "\n" + "版本 = " + version + "\n" + ("响应 = " + (success ? "成功" : "失败"))));                            StringBuilder sb = new StringBuilder("BLE_COMMAND_a2d_setFlashCommand_pack response\n\n");                            sb.append("type: ");                            switch (type) {                                case 0:                                    sb.append("AGPS");                                case 1:                                    sb.append("UI");                                case 2:                                    sb.append("font lib");                                case 3:                                    sb.append("clock dial");                                default:                                    sb.append("other");                                    break;                            }                            sb.append('\n');                            sb.append("version: ").append(version).append("\n");                            sb.append("success: ").append(success).append('\n');                            EventBus.getDefault().post(new MessageEvent(MessageEvent.FLASH_DATA, sb.toString()));                        }                        break;                    case (byte)0x04:                        // BLE_COMMAND_a2d_sendFlashData_pack response                        if(objects != null && objects.length >= 3){                            int pack_sum = (int) objects[0];                            int pack_index = (int) objects[1];                            boolean success = (boolean) objects[2];                            if(success) {                                pack_index++;                            }//                            EventBus.getDefault().post(new MessageEvent(MessageEvent.FLASH_DATA,"总包数 = " + pack_sum//                                    + "\n" + "当前包 = " + pack_index + "\n" + ("响应 = " + (success ? "成功" : "失败"))));//                            EventBus.getDefault().post(new MessageEvent(MessageEvent.FLASH, pack_index));                            StringBuilder sb = new StringBuilder("BLE_COMMAND_a2d_sendFlashData_pack response\n\n");                            sb.append("pack_sum: ").append(pack_sum).append('\n');                            sb.append("pack_index: ").append(pack_index).append('\n');                            sb.append("success: ").append(success).append('\n');                            EventBus.getDefault().post(new MessageEvent(MessageEvent.FLASH_DATA, sb.toString()));                            EventBus.getDefault().post(new MessageEvent(MessageEvent.FLASH,pack_index));                        }                        break;                    case (byte)0x06:                        // BLE_COMMAND_a2d_inquireFlashCommand_pack response                        if(objects != null && objects.length >= 2){                            int type = (int) objects[0];                            int version = (int) objects[1];//                            EventBus.getDefault().post(new MessageEvent(MessageEvent.FLASH_DATA,"类型 = " + (type == 0 ? "AGPS" : ":" )//                                    + "\n" + "版本 = " + version));                            StringBuilder sb = new StringBuilder("BLE_COMMAND_a2d_inquireFlashCommand_pack response\n\n");                            sb.append("type: ");                            switch (type) {                                case 0:                                    sb.append("AGPS");                                case 1:                                    sb.append("UI");                                case 2:                                    sb.append("font lib");                                case 3:                                    sb.append("clock dial");                                default:                                    sb.append("other");                                    break;                            }                            sb.append('\n');                            sb.append("version: ").append(version).append("\n");                            EventBus.getDefault().post(new MessageEvent(MessageEvent.FLASH_DATA, sb.toString()));                        }                        break;                    case 0x13: {                        // BLE_COMMAND_a2d_getFirmwareData_pack response                        String version = (String) objects[0];                        int braceletType = (int) objects[1];                        int platformCode = (int) objects[2];                        Log.e(TAG, "version = " + version + " ;  braceletType = " + braceletType + " ;  platformCode = " + platformCode);                        SharedPreferences preferences = mContext.getSharedPreferences("bluetooth", 0);                        SharedPreferences.Editor editor = preferences.edit();                        editor.putString("version", version);                        editor.putString("braceletType", braceletType + "");                        editor.putString("platformCode", platformCode + "");                        editor.commit();                        StringBuilder sb = new StringBuilder("BLE_COMMAND_a2d_getFirmwareData_pack response\n\n");                        sb.append("version: ").append(version).append('\n');                        sb.append("braceletType: ").append(braceletType).append('\n');                        sb.append("platformCode: ").append(platformCode).append('\n');                        EventBus.getDefault().post(new MessageEvent(MessageEvent.RSP_INFO, sb.toString()));                    }                        break;                    case 0x11: {                        // BLE_COMMAND_a2d_sendFirmwareUpdate_pack response                        StringBuilder sb = new StringBuilder("BLE_COMMAND_a2d_sendFirmwareUpdate_pack response\n\n");                        if (objects[0] instanceof String && objects[0].equals("")) {                            sb.append("the data is empty");                        } else {                            sb.append(objects[0]);                        }                        EventBus.getDefault().post(new MessageEvent(MessageEvent.RSP_INFO, sb.toString()));                        Log.e(TAG, "ota");                        isDFU = true;                        EventBus.getDefault().post(new MessageEvent(MessageEvent.OTA));                    }                        break;                    case 0x20:                        // BLE_COMMAND_a2d_settime_pack response                        EventBus.getDefault().post(new MessageEvent(MessageEvent.RSP_INFO, "BLE_COMMAND_a2d_settime_pack response\n\ndone"));                        break;                    case 0x2F: {                        // BLE_COMMAND_a2d_getBraceletSet_pack response                        StringBuilder sb = new StringBuilder("BLE_COMMAND_a2d_getBraceletSet_pack response\n\n");                        ArrayList<HashMap<String, Object>> list = (ArrayList<HashMap<String, Object>>) objects[0];                        sb.append("alarm clock:\n");                        sb.append("------------------------------\n");                        for (int j = 0; j < list.size(); j++) {                            HashMap<String, Object> clockMap = list.get(j);                            int hour = (int) clockMap.get("hour");                            int minute = (int) clockMap.get("minute");                            String repeat = (String) clockMap.get("repeat");                            int type = (int) clockMap.get("type");                            boolean enable = (boolean) clockMap.get("enable");                            Log.e(TAG, "clock j = " + j + " :  hour = " + hour + " ;  minute = " + minute + " ;  repeat = " + repeat + " ;  type = " + type + " ;  enable = " + enable);                            sb.append("clock: ").append(j).append('\n');                            sb.append("hour: ").append(hour).append('\n');                            sb.append("minute: ").append(minute).append('\n');                            sb.append("repeat: ").append(repeat).append('\n');                            sb.append("type: ").append(type).append('\n');                            sb.append("enable: ").append(enable).append('\n');                            sb.append("------------------------------\n");                        }                        sb.append("\nsedentary:\n");                        sb.append("------------------------------\n");                        HashMap<String, Object> sedentaryMap = (HashMap<String, Object>) objects[1];                        boolean sedentaryEnable = (boolean) sedentaryMap.get("enable");                        int sedentaryStart = (int) sedentaryMap.get("start");                        int sedentaryEnd = (int) sedentaryMap.get("end");                        String sedentaryRepeat = (String) sedentaryMap.get("repeat");                        int sedentaryTime = (int) sedentaryMap.get("time");                        int sedentaryThreshold = (int) sedentaryMap.get("threshold");                        Log.e(TAG, "sedentary  : " + " sedentaryEnable = " + sedentaryEnable + " ;  sedentaryStart = " + sedentaryStart + " ;  sedentaryEnd = " + sedentaryEnd                                + " ;  sedentaryRepeat = " + sedentaryRepeat + " ;  sedentaryTime = " + sedentaryTime + " ;  sedentaryThreshold = " + sedentaryThreshold);                        sb.append("enable: ").append(sedentaryEnable).append('\n');                        sb.append("start: ").append(sedentaryStart).append('\n');                        sb.append("end: ").append(sedentaryEnd).append('\n');                        sb.append("repeat: ").append(sedentaryRepeat).append('\n');                        sb.append("time: ").append(sedentaryTime).append('\n');                        sb.append("threshold: ").append(sedentaryThreshold).append('\n');                        sb.append("------------------------------\n");                        sb.append("\nuser info:\n");                        sb.append("------------------------------\n");                        HashMap<String, Object> userMap = (HashMap<String, Object>) objects[2];                        int userSex = (int) userMap.get("sex");                        int userWeight = (int) userMap.get("weight");                        int userHeight = (int) userMap.get("height");                        int userAge = (int) userMap.get("age");                        int userGoal = (int) userMap.get("goal");                        Log.e(TAG, "user  : " + " userSex = " + userSex + " ;  userWeight = " + userWeight + " ;  userHeight = " + userHeight                                + " ;  userAge = " + userAge + " ;  userGoal = " + userGoal);                        sb.append("sex: ").append(userSex).append('\n');                        sb.append("weight: ").append(userWeight).append('\n');                        sb.append("height: ").append(userHeight).append('\n');                        sb.append("age: ").append(userAge).append('\n');                        sb.append("goal: ").append(userGoal).append('\n');                        sb.append("------------------------------\n");                        sb.append("\notify_mode:\n");                        sb.append("------------------------------\n");                        int notify_mode = (int) objects[3];                        Log.e(TAG, "notify_mode  : " + " notify_mode = " + notify_mode);                        sb.append("------------------------------\n");                        sb.append("\ndisturb:\n");                        sb.append("------------------------------\n");                        HashMap<String, Object> disturbMap = (HashMap<String, Object>) objects[4];                        boolean disturbEnable = (boolean) disturbMap.get("enable");                        int disturbStartHour = (int) disturbMap.get("startHour");                        int disturbStartMin = (int) disturbMap.get("startMin");                        int disturbEndHour = (int) disturbMap.get("endHour");                        int disturbEndMin = (int) disturbMap.get("endMin");                        Log.e(TAG, "disturb  : " + " disturbEnable = " + disturbEnable + " ;  disturbStartHour = " + disturbStartHour + " ;  disturbStartMin = " + disturbStartMin                                + " ;  disturbEndHour = " + disturbEndHour + " ;  disturbEndMin = " + disturbEndMin);                        sb.append("enable: ").append(disturbEnable).append('\n');                        sb.append("startHour: ").append(disturbStartHour).append('\n');                        sb.append("startMin: ").append(disturbStartMin).append('\n');                        sb.append("endHour: ").append(disturbEndHour).append('\n');                        sb.append("endMin: ").append(disturbEndMin).append('\n');                        sb.append("------------------------------\n");                        sb.append("\nheart:\n");                        sb.append("------------------------------\n");                        HashMap<String, Object> heartMap = (HashMap<String, Object>) objects[5];                        boolean heartEnable = (boolean) heartMap.get("enable");                        int heartStartHour = (int) heartMap.get("startHour");                        int heartStartMin = (int) heartMap.get("startMin");                        int heartEndHour = (int) heartMap.get("endHour");                        int heartEndMin = (int) heartMap.get("endMin");                        int heartInterval = (int) heartMap.get("interval");                        Log.e(TAG, "heart  : " + " heartEnable = " + heartEnable + " ;  heartStartHour = " + heartStartHour + " ;  heartStartMin = " + heartStartMin                                + " ;  heartEndHour = " + heartEndHour + " ;  heartEndMin = " + heartEndMin + " ;  heartInterval = " + heartInterval);                        sb.append("enable: ").append(heartEnable).append('\n');                        sb.append("startHour: ").append(heartStartHour).append('\n');                        sb.append("startMin: ").append(heartStartMin).append('\n');                        sb.append("endHour: ").append(heartEndHour).append('\n');                        sb.append("endMin: ").append(heartEndMin).append('\n');                        sb.append("interval: ").append(heartInterval).append('\n');                        sb.append("------------------------------\n");                        sb.append("\nsystem:\n");                        sb.append("------------------------------\n");                        HashMap<String, Object> systemMap = (HashMap<String, Object>) objects[6];                        int systemLanguage = (int) systemMap.get("language");                        int systemHour = (int) systemMap.get("hour");                        int systemScreen = (int) systemMap.get("screen");                        int systemPair = (int) systemMap.get("pair");                        Log.e(TAG, "system  : " + " systemLanguage = " + systemLanguage + " ;  systemHour = " + systemHour + " ;  systemScreen = " + systemScreen                                + " ;  systemPair = " + systemPair);                        sb.append("language: ").append(systemLanguage).append('\n');                        sb.append("hour: ").append(systemHour).append('\n');                        sb.append("screen: ").append(systemScreen).append('\n');                        sb.append("pair: ").append(systemPair).append('\n');                        sb.append("------------------------------\n");                        sb.append("\nwater:\n");                        sb.append("------------------------------\n");                        HashMap<String, Object> waterMap = (HashMap<String, Object>) objects[7];                        boolean waterEnable = (boolean) waterMap.get("enable");                        int waterStartHour = (int) waterMap.get("startHour");                        int waterStartMin = (int) waterMap.get("startMin");                        int waterEndHour = (int) waterMap.get("endHour");                        int waterEndMin = (int) waterMap.get("endMin");                        String waterRepeat = (String) waterMap.get("repeat");                        int waterInterval = (int) waterMap.get("interval");                        Log.e(TAG, "water  : " + " waterEnable = " + waterEnable + " ;  waterStartHour = " + waterStartHour + " ;  waterStartMin = " + waterStartMin                                + " ;  waterEndHour = " + waterEndHour + " ;  waterEndMin = " + waterEndMin + " ;  waterRepeat = " + waterRepeat + " ;  waterInterval = " + waterInterval);                        sb.append("enable: ").append(waterEnable).append('\n');                        sb.append("startHour: ").append(waterStartHour).append('\n');                        sb.append("startMin: ").append(waterStartMin).append('\n');                        sb.append("endHour: ").append(waterEndHour).append('\n');                        sb.append("endMin: ").append(waterEndMin).append('\n');                        sb.append("repeat: ").append(waterRepeat).append('\n');                        sb.append("interval: ").append(waterInterval).append('\n');                        sb.append("------------------------------\n");                        sb.append("\ngoal:\n");                        sb.append("------------------------------\n");                        int goal = (int) objects[8];                        Log.e(TAG, "goal  : " + " goal = " + goal);                        sb.append("goal: ").append(goal).append('\n');                        sb.append("------------------------------\n");                        sb.append("\ngesture:\n");                        sb.append("------------------------------\n");                        HashMap<String, Object> gestureMap = (HashMap<String, Object>) objects[9];                        int gestureHand = (int) gestureMap.get("hand");                        boolean gestureRaise = (boolean) gestureMap.get("raise");                        boolean gestureWrist = (boolean) gestureMap.get("wrist");                        Log.e(TAG, "gesture  : " + " gestureHand = " + gestureHand + " ;  gestureRaise = " + gestureRaise + " ;  gestureWrist = " + gestureWrist);                        sb.append("hand: ").append(gestureHand).append('\n');                        sb.append("raise: ").append(gestureRaise).append('\n');                        sb.append("wrist: ").append(gestureWrist).append('\n');                        sb.append("------------------------------\n");                        EventBus.getDefault().post(new MessageEvent(MessageEvent.RSP_INFO, sb.toString()));                    }                        break;                    case (byte)0xA2: {    //history_sleep                        // BLE_COMMAND_a2d_synData_pack(type=1) response                        StringBuilder sb = new StringBuilder("BLE_COMMAND_a2d_synData_pack response\n\n");                        if (objects[0] instanceof String && objects[0].equals("")) {   //判断数据是否为空                            Log.e(TAG, getString(R.string.data_empty));                            sb.append("the data is empty");                        } else {                            String sleepYear = (String) objects[0];                            String sleepMonth = (String) objects[1];                            String sleepDay = (String) objects[2];                            sb.append("year: ").append(sleepYear).append('\n');                            sb.append("month: ").append(sleepMonth).append('\n');                            sb.append("day: ").append(sleepDay).append('\n');                            sb.append("------------------------------\n");                            ArrayList<HashMap<String, Object>> sleepList = (ArrayList<HashMap<String, Object>>) objects[3];                            for (int j = 0; j < sleepList.size(); j++) {                                HashMap<String, Object> sleepMap = sleepList.get(j);                                int sleepMode = (int) sleepMap.get("sleepMode");                                int sleepHour = (int) sleepMap.get("sleepHour");                                int sleepMinute = (int) sleepMap.get("sleepMinute");                                Log.e(TAG, "sleepYear = " + sleepYear + " ;  sleepMonth = " + sleepMonth + " ;  sleepDay = " + sleepDay + " ;  sleepMode = " +                                        sleepMode + " ; sleepHour = " + sleepHour + " ;  sleepMinute = " + sleepMinute);                                sb.append("sleepMode: ").append(sleepMode).append('\n');                                sb.append("sleepHour: ").append(sleepHour).append('\n');                                sb.append("sleepMinute: ").append(sleepMinute).append('\n');                                sb.append("------------------------------\n");                            }                        }                        EventBus.getDefault().post(new MessageEvent(MessageEvent.RSP_INFO, sb.toString()));                    }                        break;                    case (byte)0xA3: { //history_run                        // BLE_COMMAND_a2d_synData_pack(type=3) response                        StringBuilder sb = new StringBuilder("BLE_COMMAND_a2d_synData_pack response\n\n");                        if (objects[0] instanceof String && objects[0].equals("")) {   //判断数据是否为空                            Log.e(TAG, getString(R.string.data_empty));                            sb.append("the data is empty");                        } else {                            ArrayList<HashMap<String, Object>> runList = (ArrayList<HashMap<String, Object>>) objects[0];                            sb.append("------------------------------\n");                            for (int j = 0; j < runList.size(); j++) {                                HashMap<String, Object> runMap = runList.get(j);                                int runYear = (int) runMap.get("year");                                int runMonth = (int) runMap.get("month");                                int runDay = (int) runMap.get("day");                                int runHour = (int) runMap.get("hour");                                int runStep = (int) runMap.get("step");                                double calorie = (double) runMap.get("calorie");                                double distance = (double) runMap.get("distance");                                Log.e(TAG, "runYear = " + runYear + " ;  runMonth = " + runMonth + " ;  runDay = " + runDay + " ;  runHour = " +                                        runHour + " ; runStep = " + runStep + " ; calorie = " + calorie + " ; distance = " + distance);                                sb.append("year: ").append(runYear).append('\n');                                sb.append("month: ").append(runMonth).append('\n');                                sb.append("day: ").append(runDay).append('\n');                                sb.append("hour: ").append(runHour).append('\n');                                sb.append("step: ").append(runStep).append('\n');                                sb.append("calorie: ").append(calorie).append('\n');                                sb.append("distance: ").append(distance).append('\n');                                sb.append("------------------------------\n");                            }                        }                        EventBus.getDefault().post(new MessageEvent(MessageEvent.RSP_INFO, sb.toString()));                    }                        break;                    case (byte)0xA4: {      //history_heart                        // BLE_COMMAND_a2d_synData_pack(type=2) response                        StringBuilder sb = new StringBuilder("BLE_COMMAND_a2d_synData_pack response\n\n");                        if (objects[0] instanceof String && objects[0].equals("")) {   //判断数据是否为空                            Log.e(TAG, getString(R.string.data_empty));                            sb.append("the data is empty");                        } else {                            ArrayList<HashMap<String, Object>> heartList = (ArrayList<HashMap<String, Object>>) objects[0];                            sb.append("------------------------------\n");                            for (int j = 0; j < heartList.size(); j++) {                                HashMap<String, Object> runMap = heartList.get(j);                                int heartYear = (int) runMap.get("year");                                int heartMonth = (int) runMap.get("month");                                int heartDay = (int) runMap.get("day");                                int heartHour = (int) runMap.get("hour");                                int heartMinute = (int) runMap.get("minute");                                int heartSecond = (int) runMap.get("second");                                int heart = (int) runMap.get("heart");                                Log.e(TAG, "heartYear = " + heartYear + " ;  heartMonth = " + heartMonth + " ;  heartDay = " + heartDay + " ;  heartHour = " +                                        heartHour + " ; heartMinute = " + heartMinute + " ; heartSecond = " + heartSecond + " ;  heart = " + heart);                                sb.append("year: ").append(heartYear).append('\n');                                sb.append("month: ").append(heartMonth).append('\n');                                sb.append("day: ").append(heartDay).append('\n');                                sb.append("hour: ").append(heartHour).append('\n');                                sb.append("minute: ").append(heartMinute).append('\n');                                sb.append("second: ").append(heartSecond).append('\n');                                sb.append("heart: ").append(heart).append('\n');                                sb.append("------------------------------\n");                            }                        }                        EventBus.getDefault().post(new MessageEvent(MessageEvent.RSP_INFO, sb.toString()));                    }                        break;                    case (byte)0xA5: {   //history_sport                        // BLE_COMMAND_a2d_synData_pack(type=4) response                        StringBuilder sb = new StringBuilder("BLE_COMMAND_a2d_synData_pack response\n\n");                        if (objects[0] instanceof String && objects[0].equals("")) {   //判断数据是否为空                            Log.e(TAG, getString(R.string.data_empty));                            sb.append("the data is empty");                        } else if (objects[0] instanceof ArrayList) {                            ArrayList<HashMap<String, Object>> sportList = (ArrayList<HashMap<String, Object>>) objects[0];                            sb.append("------------------------------\n");                            for (int j = 0; j < sportList.size(); j++) {                                HashMap<String, Object> sportMap = sportList.get(j);                                int sportSportYear = (int) sportMap.get("year");                                int sportMonth = (int) sportMap.get("month");                                int sportDay = (int) sportMap.get("day");                                int sportStartHour = (int) sportMap.get("startHour");                                int sportStartMin = (int) sportMap.get("startMin");                                int sportStartSec = 0;                                if (sportMap.containsKey("startSec")) {                                    sportStartSec = (int) sportMap.get("startSec");                                }                                int sportEndHour = (int) sportMap.get("endHour");                                int sportEndMin = (int) sportMap.get("endMin");                                int sportEndSec = 0;                                if (sportMap.containsKey("endSec")) {                                    sportEndSec = (int) sportMap.get("endSec");                                }                                int sportType = (int) sportMap.get("type");                                int sportStep = (int) sportMap.get("step");                                float sportCalorie = (float) sportMap.get("calorie");                                Log.e(TAG, "sportSportYear = " + sportSportYear + " ;  sportMonth = " + sportMonth + " ;  sportDay = " + sportDay + " ;  sportStartHour = " +                                        sportStartHour + " ; sportStartMin = " + sportStartMin + " ; sportEndHour = " + sportEndHour + " ;  sportEndMin = " + sportEndMin +                                        " ;  sportType = " + sportType + " ;  sportStep = " + sportStep + " ;  sportCalorie = " + sportCalorie);                                sb.append("year: ").append(sportSportYear).append('\n');                                sb.append("month: ").append(sportMonth).append('\n');                                sb.append("day: ").append(sportDay).append('\n');                                sb.append("startHour: ").append(sportStartHour).append('\n');                                sb.append("startMin: ").append(sportStartMin).append('\n');                                sb.append("endMin: ").append(sportEndMin).append('\n');                                if (sportMap.containsKey("startSec")) {                                    sb.append("startSec: ").append(sportStartSec).append('\n');                                }                                sb.append("endHour: ").append(sportEndHour).append('\n');                                sb.append("endMin: ").append(sportEndMin).append('\n');                                if (sportMap.containsKey("endSec")) {                                    sb.append("endSec: ").append(sportEndSec).append('\n');                                }                                sb.append("type: ").append(sportType).append('\n');                                sb.append("step: ").append(sportStep).append('\n');                                sb.append("calorie: ").append(sportCalorie).append('\n');                                sb.append("------------------------------\n");                            }                        } else if (objects[0] instanceof HashMap) {                            HashMap<String, Object> gpsMap = (HashMap<String, Object>) objects[0];                            int type = (int) gpsMap.get("type");                            int year = (int) gpsMap.get("year");                            int month = (int) gpsMap.get("month");                            int day = (int) gpsMap.get("day");                            int hour = (int) gpsMap.get("hour");                            int minute = (int) gpsMap.get("minute");                            int second = (int) gpsMap.get("second");                            int sportTime = (int) gpsMap.get("sportTime");                            int sportDistance = (int) gpsMap.get("sportDistance");                            int sportCalorie = (int) gpsMap.get("sportCalorie");                            int sportStep = (int) gpsMap.get("sportStep");                            int maxHeart = (int) gpsMap.get("maxHeart");                            int avgHeart = (int) gpsMap.get("avgHeart");                            int minHeart = (int) gpsMap.get("minHeart");                            int maxFrequency = (int) gpsMap.get("maxFrequency");                            int avgFrequency = (int) gpsMap.get("avgFrequency");                            int minFrequency = (int) gpsMap.get("minFrequency");                            int maxPace = (int) gpsMap.get("maxPace");                            int avgPace = (int) gpsMap.get("avgPace");                            int minPace = (int) gpsMap.get("minPace");                            int gpsNumber = (int) gpsMap.get("gpsNumber");                            Log.e(TAG, "type = " + type + " ;  year = " + year + " ;  month = " + month + " ;  day = " +                                    day + " ; hour = " + hour + " ; minute = " + minute + " ;  second = " + second +                                    " ;  sportTime = " + sportTime + " ;  sportDistance = " + sportDistance + " ;  sportCalorie = " + sportCalorie + " ;  sportStep = " + sportStep + " ;  maxHeart = " + maxHeart + " ;  avgHeart = " +                                    avgHeart + " ; minHeart = " + minHeart + " ; maxFrequency = " + maxFrequency + " ;  avgFrequency = " + avgFrequency +                                    " ;  minFrequency = " + minFrequency + " ;  maxPace = " + maxPace + " ;  avgPace = " + avgPace + " ; minPace = " + minPace + " ;  gpsNumber = " + gpsNumber);                            sb.append("type: ").append(type).append('\n');                            sb.append("year: ").append(year).append('\n');                            sb.append("month: ").append(month).append('\n');                            sb.append("day: ").append(day).append('\n');                            sb.append("hour: ").append(hour).append('\n');                            sb.append("minute: ").append(minute).append('\n');                            sb.append("second: ").append(second).append('\n');                            sb.append("sportTime: ").append(sportTime).append('\n');                            sb.append("sportDistance: ").append(sportDistance).append('\n');                            sb.append("sportCalorie: ").append(sportCalorie).append('\n');                            sb.append("sportStep: ").append(sportStep).append('\n');                            sb.append("maxHeart: ").append(maxHeart).append('\n');                            sb.append("avgHeart: ").append(avgHeart).append('\n');                            sb.append("minHeart: ").append(minHeart).append('\n');                            sb.append("maxFrequency: ").append(maxFrequency).append('\n');                            sb.append("avgFrequency: ").append(avgFrequency).append('\n');                            sb.append("minFrequency: ").append(minFrequency).append('\n');                            sb.append("maxPace: ").append(maxPace).append('\n');                            sb.append("avgPace: ").append(avgPace).append('\n');                            sb.append("minPace: ").append(minPace).append('\n');                            sb.append("gpsNumber: ").append(gpsNumber).append('\n');                            ArrayList<String> gpsList = (ArrayList) gpsMap.get("gpsList");                            sb.append("------------------------------\n");                            for (int j = 0; j < gpsList.size(); j++) {                                String gpsData = gpsList.get(j);                                Log.e(TAG, "gpsDat = " + gpsData);                                sb.append("gpsDat: ").append(gpsData).append('\n');                                sb.append("------------------------------\n");                            }                        }                        EventBus.getDefault().post(new MessageEvent(MessageEvent.RSP_INFO, sb.toString()));                    }                        break;                    case (byte)0xAB:   //real_heart                        Log.e(TAG, "heart = " + (int) objects[0]);                        EventBus.getDefault().post(new MessageEvent(MessageEvent.RSP_INFO, "heart: " + objects[0]));                        break;                    case (byte)0xAC:  //real_run                        int run = (int) objects[0];                        float calorie = (float) objects[1];                        float distance = (float) objects[2];                        Log.e(TAG, "run = " + run + " ; calorie = " + calorie + " ;  distance = " + distance);                        break;                    case (byte)0xb3:                        Log.e(TAG,getString(R.string.syn_motion_status_response));                        break;                    case (byte)0xb4:                        Log.e(TAG,"" + objects[0] + objects[1]);                        break;                    case (byte)0x43:                        if(objects != null && objects.length > 0){                            if((int)objects[0] == 0){                                Log.e(TAG,getString(R.string.unbind_device_success));                            }else{                                Log.e(TAG,getString(R.string.unbind_device_fail));                            }                        }else{                            Log.e(TAG,getString(R.string.unbind_device_response));                        }                        break;                    case (byte)0x45:                        if(objects != null && objects.length > 0){                            if((int)objects[0] == 0){                                Log.e(TAG,getString(R.string.bind_device_success));                            }else{                                Log.e(TAG,getString(R.string.bind_device_fail));                            }                        }else{                            Log.e(TAG,getString(R.string.bind_device_response));                        }                        break;                    case (byte) 0x50:                        // BLE_COMMAND_a2d_findDevice_pack response                        EventBus.getDefault().post(new MessageEvent(MessageEvent.RSP_INFO, "BLE_COMMAND_a2d_findDevice_pack response\n\ndone"));                        break;                }            }        }    };}