package com.kct.bluetooth_demo;import android.Manifest;import android.bluetooth.BluetoothDevice;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.support.v7.app.AppCompatActivity;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;import com.kct.bluetooth.KCTBluetoothManager;import com.kct.bluetooth.callback.IDFUProgressCallback;import com.kct.command.BLEBluetoothManager;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.HashMap;public class MainActivity extends AppCompatActivity implements View.OnClickListener{    private Button button;    private TextView textView_send,textView_receive,textView_device,textView_connectState;    private static final String TAG = MainActivity.class.getSimpleName();    private SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");    private static final int REQUEST_EXTERNAL_STORAGE = 1;    private static String[] PERMISSIONS_STORAGE = {            Manifest.permission.WRITE_EXTERNAL_STORAGE,            Manifest.permission.READ_EXTERNAL_STORAGE,            Manifest.permission.READ_PHONE_STATE    };    private int pack_Sum = 0;    private int pack_remainder = 0;    private int pack_index = 0;    private byte[] flash_data;    @Subscribe(threadMode = ThreadMode.MAIN)    public void onServiceEventMainThread(MessageEvent messageEvent){        if(messageEvent != null && messageEvent.getMessage() != null){            switch (messageEvent.getMessage()){                case MessageEvent.RECEIVE_DATA:                    textView_receive.setText(Arrays.toString((byte[])messageEvent.getObject()));                    break;                case MessageEvent.CONNECT_DEVICE:                    textView_device.setText(((BluetoothDevice)messageEvent.getObject()).getName());                    break;                case MessageEvent.CONNECT_STATE:                    int connect_state = (int) messageEvent.getObject();                    if(connect_state == KCTBluetoothManager.STATE_NONE){                        textView_connectState.setText(getString(R.string.connect_none));                    }else if(connect_state == KCTBluetoothManager.STATE_CONNECTING){                        textView_connectState.setText(getString(R.string.connecting));                    }else if(connect_state == KCTBluetoothManager.STATE_CONNECTED){                        textView_connectState.setText(getString(R.string.connected));                    }else if(connect_state == KCTBluetoothManager.STATE_CONNECT_FAIL){                        textView_connectState.setText(getString(R.string.connect_fail));                    }                    break;                case MessageEvent.FLASH:                    int pack_index = (int) messageEvent.getObject();                    sendFlash_data(pack_Sum,pack_index);                    break;                case MessageEvent.FLASH_DATA:                    String data = (String) messageEvent.getObject();                    textView_receive.setText(data);                    break;                case MessageEvent.RSP_INFO:                    textView_receive.setText((String) messageEvent.getObject());                    break;                case MessageEvent.DEVICE_NOTI_INFO:                    textView_receive.setText((String) messageEvent.getObject());                    break;            }        }    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        EventBus.getDefault().register(this);//        button = (Button) findViewById(R.id.connect);//        button.setOnClickListener(this);        textView_send = (TextView) findViewById(R.id.textView_send_data);        textView_receive = (TextView) findViewById(R.id.textView_receive_data);        textView_device = (TextView) findViewById(R.id.textView_device);        textView_connectState = (TextView) findViewById(R.id.textView_connectState);        if(Build.VERSION.SDK_INT >= 23 ) {            if (this.checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) !=                    PackageManager.PERMISSION_GRANTED) ;            if (this.checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) !=                    PackageManager.PERMISSION_GRANTED) ;            requestPermissions(PERMISSIONS_STORAGE,                    REQUEST_EXTERNAL_STORAGE);        }        KCTBluetoothManager.getInstance().registerDFUProgressListener(mDfuProgressListener);        /*                        Define button here                */        findViewById(R.id.connect).setOnClickListener(this);        findViewById(R.id.disConnect).setOnClickListener(this);        findViewById(R.id.syn_time).setOnClickListener(this);        findViewById(R.id.syn_firmware).setOnClickListener(this);        findViewById(R.id.find_device).setOnClickListener(this);        findViewById(R.id.syn_brace).setOnClickListener(this);        findViewById(R.id.syn_run).setOnClickListener(this);        findViewById(R.id.syn_sleep).setOnClickListener(this);        findViewById(R.id.syn_heart).setOnClickListener(this);        findViewById(R.id.syn_blood).setOnClickListener(this);        findViewById(R.id.syn_oxygen).setOnClickListener(this);        findViewById(R.id.syn_sport).setOnClickListener(this);        findViewById(R.id.syn_realRun).setOnClickListener(this);        findViewById(R.id.syn_realHeart).setOnClickListener(this);        findViewById(R.id.syn_userInfo).setOnClickListener(this);        findViewById(R.id.syn_camera).setOnClickListener(this);        findViewById(R.id.syn_unit).setOnClickListener(this);        findViewById(R.id.syn_notification).setOnClickListener(this);        findViewById(R.id.syn_call).setOnClickListener(this);        findViewById(R.id.syn_sms).setOnClickListener(this);        findViewById(R.id.syn_clock).setOnClickListener(this);        findViewById(R.id.syn_water).setOnClickListener(this);        findViewById(R.id.syn_longSit).setOnClickListener(this);        findViewById(R.id.syn_noDir).setOnClickListener(this);        findViewById(R.id.firmware_upgrade).setOnClickListener(this);        findViewById(R.id.syn_motion_state_device).setOnClickListener(this);        findViewById(R.id.syn_sport_motion_setting).setOnClickListener(this);        findViewById(R.id.syn_bind_device).setOnClickListener(this);        findViewById(R.id.syn_unbind_device).setOnClickListener(this);        findViewById(R.id.syn_hid_connect).setOnClickListener(this);        findViewById(R.id.syn_hid_disConnect).setOnClickListener(this);        findViewById(R.id.syn_inquire_flash_version).setOnClickListener(this);        findViewById(R.id.syn_set_flash_begin_command).setOnClickListener(this);        findViewById(R.id.get_flash_data).setOnClickListener(this);        findViewById(R.id.send_flash_data).setOnClickListener(this);    }    @Override    protected void onResume() {        super.onResume();    }    @Override    public void onClick(View v) {        switch (v.getId()){            case R.id.connect:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED){                    Toast.makeText(this,getString(R.string.please_disconnect),Toast.LENGTH_SHORT).show();                }else {                    startActivity(new Intent(this, DeviceScanActivity.class));                }                break;            case R.id.disConnect:                KCTBluetoothManager.getInstance().disConnect_a2d();                break;            case R.id.syn_time:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] setTime_pack = BLEBluetoothManager.BLE_COMMAND_a2d_settime_pack();                    if (setTime_pack != null) {                        textView_send.setText(Arrays.toString(setTime_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(setTime_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_firmware:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] firmwareData_pack = BLEBluetoothManager.BLE_COMMAND_a2d_getFirmwareData_pack();                    textView_send.setText(Arrays.toString(firmwareData_pack));                    KCTBluetoothManager.getInstance().sendCommand_a2d(firmwareData_pack);                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.find_device:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] findDevice_pack = BLEBluetoothManager.BLE_COMMAND_a2d_findDevice_pack();                    textView_send.setText(Arrays.toString(findDevice_pack));                    KCTBluetoothManager.getInstance().sendCommand_a2d(findDevice_pack);                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_brace:  //syn Smart bracelet Info                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] braceletSet_pack = BLEBluetoothManager.BLE_COMMAND_a2d_getBraceletSet_pack();                    textView_send.setText(Arrays.toString(braceletSet_pack));                    KCTBluetoothManager.getInstance().sendCommand_a2d(braceletSet_pack);                }else {                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_run:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {//                    byte[] run_pack = BLEBluetoothManager.BLE_COMMAND_a2d_synData_pack(3, simpleDateFormat.format(2019-07-8-00-00-00));                    byte[] run_pack = BLEBluetoothManager.BLE_COMMAND_a2d_synData_pack(3, simpleDateFormat.format(new Date()));                    textView_send.setText(Arrays.toString(run_pack));                    KCTBluetoothManager.getInstance().sendCommand_a2d(run_pack);                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_sleep:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] sleep_pack = BLEBluetoothManager.BLE_COMMAND_a2d_synData_pack(1, simpleDateFormat.format(new Date()));                    textView_send.setText(Arrays.toString(sleep_pack));                    KCTBluetoothManager.getInstance().sendCommand_a2d(sleep_pack);                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_heart:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] heart_pack = BLEBluetoothManager.BLE_COMMAND_a2d_synData_pack(2, simpleDateFormat.format(new Date()));                    textView_send.setText(Arrays.toString(heart_pack));                    KCTBluetoothManager.getInstance().sendCommand_a2d(heart_pack);                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_sport:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] sport_pack = BLEBluetoothManager.BLE_COMMAND_a2d_synData_pack(4, simpleDateFormat.format(new Date()));                    textView_send.setText(Arrays.toString(sport_pack));                    KCTBluetoothManager.getInstance().sendCommand_a2d(sport_pack);                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_realRun:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] realRun_pack = BLEBluetoothManager.BLE_COMMAND_a2d_synRealData_pack(3);                    textView_send.setText(Arrays.toString(realRun_pack));                    KCTBluetoothManager.getInstance().sendCommand_a2d(realRun_pack);                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_realHeart:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] realHeart_pack = BLEBluetoothManager.BLE_COMMAND_a2d_synRealData_pack(2);                    textView_send.setText(Arrays.toString(realHeart_pack));                    KCTBluetoothManager.getInstance().sendCommand_a2d(realHeart_pack);                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_blood:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    Toast.makeText(this,getString(R.string.device_not_support),Toast.LENGTH_SHORT).show();                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_oxygen:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    Toast.makeText(this,getString(R.string.device_not_support),Toast.LENGTH_SHORT).show();                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_userInfo:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    HashMap<String,Object> userInfoMap = new HashMap<>();                    userInfoMap.put("sex",1);                    userInfoMap.put("weight",60);                    userInfoMap.put("height",170);                    userInfoMap.put("age",18);                    userInfoMap.put("goal",10000);                    byte[] userInfo_pack = BLEBluetoothManager.BLE_COMMAND_a2d_setInformation_pack(this,userInfoMap);                    if(userInfo_pack != null) {                        textView_send.setText(Arrays.toString(userInfo_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(userInfo_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_camera:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] camera_pack =  BLEBluetoothManager.BLE_COMMAND_a2d_setTakePhoto_pack(1);                    if(camera_pack != null) {                        textView_send.setText(Arrays.toString(camera_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(camera_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_unit:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] unit_pack =  BLEBluetoothManager.BLE_COMMAND_a2d_setUnit_pack(0,0);                    if(unit_pack != null) {                        textView_send.setText(Arrays.toString(unit_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(unit_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_notification:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] call_pack =  BLEBluetoothManager.BLE_COMMAND_a2d_sendNotificationData_pack(10,"It is notification message");                    if(call_pack != null) {                        textView_send.setText(Arrays.toString(call_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(call_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_call:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] call_pack =  BLEBluetoothManager.BLE_COMMAND_a2d_sendNotificationData_pack(0,"It is call message");                    if(call_pack != null) {                        textView_send.setText(Arrays.toString(call_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(call_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_sms:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    byte[] sms_pack =  BLEBluetoothManager.BLE_COMMAND_a2d_sendNotificationData_pack(1,"It is sms message");                    if(sms_pack != null) {                        textView_send.setText(Arrays.toString(sms_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(sms_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_clock:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    ArrayList<HashMap<String,Object>> list = new ArrayList<>();                    HashMap<String,Object> clockMap = new HashMap<>();                    clockMap.put("enable",false);                    clockMap.put("hour",9);                    clockMap.put("minute",0);                    clockMap.put("repeat","1001111");                    clockMap.put("type",0);                    HashMap<String,Object> clockMap1 = new HashMap<>();                    clockMap1.put("enable",false);                    clockMap1.put("hour",10);                    clockMap1.put("minute",0);                    clockMap1.put("repeat","1011010");                    clockMap1.put("type",0);                    list.add(clockMap);                    list.add(clockMap1);                    byte[] clock_pack = BLEBluetoothManager.BLE_COMMAND_a2d_setAlarmClock_pack(list);                    if(clock_pack != null) {                        textView_send.setText(Arrays.toString(clock_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(clock_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_water:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    HashMap<String,Object> waterMap = new HashMap<>();                    waterMap.put("enable",false);                    waterMap.put("startHour",9);                    waterMap.put("startMin",0);                    waterMap.put("endHour",11);                    waterMap.put("endMin",0);                    waterMap.put("repeat",87+"");                    waterMap.put("interval",30);                    byte[] water_pack = BLEBluetoothManager.BLE_COMMAND_a2d_setDrink_pack(waterMap);                    if(water_pack != null) {                        textView_send.setText(Arrays.toString(water_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(water_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_longSit:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    HashMap<String,Object> sitMap = new HashMap<>();                    sitMap.put("enable",false);                    sitMap.put("start",7);                    sitMap.put("end",22);                    sitMap.put("repeat",1010101+"");                    sitMap.put("time",30);                    sitMap.put("threshold",1000);                    byte[] longSit_pack = BLEBluetoothManager.BLE_COMMAND_a2d_setSedentary_pack(sitMap);                    if(longSit_pack != null) {                        textView_send.setText(Arrays.toString(longSit_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(longSit_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_noDir:                if(KCTBluetoothManager.getInstance().getConnectState() == KCTBluetoothManager.STATE_CONNECTED) {                    HashMap<String,Object> noDisturbMap = new HashMap<>();                    noDisturbMap.put("enable",false);                    noDisturbMap.put("startHour",9);                    noDisturbMap.put("startMin",0);                    noDisturbMap.put("endHour",11);                    noDisturbMap.put("endMin",0);                    byte[] disturb_pack = BLEBluetoothManager.BLE_COMMAND_a2d_setDisturb_pack(noDisturbMap);                    if(disturb_pack != null) {                        textView_send.setText(Arrays.toString(disturb_pack));                        KCTBluetoothManager.getInstance().sendCommand_a2d(disturb_pack);                    }                }else{                    Toast.makeText(this,getString(R.string.device_not_connect),Toast.LENGTH_SHORT).show();                }                break;            case R.id.firmware_upgrade:                SharedPreferences preferences = MainActivity.this.getSharedPreferences("bluetooth", 0);                final String platformCode = preferences.getString("platformCode", "");                final String version = preferences.getString("version", "");                if(!TextUtils.isEmpty(platformCode)){                    new Thread(new Runnable() {                        @Override                        public void run() {                            String serverVersion = KCTBluetoothManager.getInstance().checkDFU_upgrade(Integer.parseInt(platformCode));                            if(Utils.versionCompare(version,serverVersion)){                                byte[] bytes = KCTBluetoothManager.getInstance().getDFU_data(Integer.parseInt(platformCode));                                File file = new File(Environment.getExternalStorageDirectory() + "/KCTBluetooth_SDK/" + "dfu.zip");                                if(!file.getParentFile().exists()){                                    file.getParentFile().mkdirs();                                }                                try {                                    BufferedOutputStream bw = new BufferedOutputStream(new FileOutputStream(file));                                    bw.write(bytes);                                } catch (FileNotFoundException e) {                                    e.printStackTrace();                                } catch (IOException e) {                                    e.printStackTrace();                                }                                KCTBluetoothManager.getInstance().sendCommand_a2d(BLEBluetoothManager.BLE_COMMAND_a2d_sendFirmwareUpdate_pack());                            }else{                                runOnUiThread(new Runnable() {                                    @Override                                    public void run() {                                        Toast.makeText(MainActivity.this,"It is already the latest version",Toast.LENGTH_SHORT).show();                                    }                                });                            }                        }                    }).start();                }else{                    Toast.makeText(MainActivity.this,"It is empty platformCode ",Toast.LENGTH_SHORT).show();                }                break;            case R.id.syn_motion_state_device:                KCTBluetoothManager.getInstance().sendCommand_a2d(BLEBluetoothManager.BLE_COMMAND_a2d_synMotionStateToDevice_pack(0,1));                break;            case R.id.syn_sport_motion_setting:                KCTBluetoothManager.getInstance().sendCommand_a2d(BLEBluetoothManager.BLE_COMMAND_a2d_synMotionSetting_pack(50,1,100,1000));                break;            case R.id.syn_bind_device:                KCTBluetoothManager.getInstance().sendCommand_a2d(BLEBluetoothManager.BLE_COMMAND_a2d_setBindDevice_pack());                break;            case R.id.syn_unbind_device:                KCTBluetoothManager.getInstance().sendCommand_a2d(BLEBluetoothManager.BLE_COMMAND_a2d_setUnBindDevice_pack());                break;            case R.id.syn_hid_connect:                KCTBluetoothManager.getInstance().hidConnect(KCTBluetoothManager.getInstance().getConnectDevice());                break;            case R.id.syn_hid_disConnect:                KCTBluetoothManager.getInstance().hidDisConnect(KCTBluetoothManager.getInstance().getConnectDevice());                break;            case R.id.syn_inquire_flash_version:                KCTBluetoothManager.getInstance().sendCommand_a2d(BLEBluetoothManager.BLE_COMMAND_a2d_inquireFlashCommand_pack(0));                break;            case R.id.syn_set_flash_begin_command:                KCTBluetoothManager.getInstance().sendCommand_a2d(BLEBluetoothManager.BLE_COMMAND_a2d_setFlashCommand_pack(0,1));                break;            case R.id.get_flash_data:                new Thread(new Runnable() {                    @Override                    public void run() {                        flash_data = KCTBluetoothManager.getInstance().getFlash_data();                        if(flash_data != null) {                            EventBus.getDefault().post(new MessageEvent(MessageEvent.FLASH_DATA, "获取FLASH数据成功"));                        }else{                            EventBus.getDefault().post(new MessageEvent(MessageEvent.FLASH_DATA, "获取FLASH数据失败"));                        }                    }                }).start();                break;            case R.id.send_flash_data:                if(flash_data != null) {                    pack_Sum = flash_data.length / 100;                    pack_remainder = flash_data.length % 100;                    pack_index = 0;                    sendFlash_data(pack_Sum, pack_index);                }else{                    Toast.makeText(MainActivity.this,"请先获取Flash数据包",Toast.LENGTH_SHORT).show();                }                break;        }    }    @Override    protected void onDestroy() {        super.onDestroy();        KCTBluetoothManager.getInstance().unregisterDFUProgressListener();        EventBus.getDefault().unregister(this);    }    private final IDFUProgressCallback mDfuProgressListener = new IDFUProgressCallback() {        @Override        public void onDeviceConnecting(String deviceAddress) {            Log.e(TAG,"onDeviceConnecting");        }        @Override        public void onDeviceConnected(String deviceAddress) {            Log.e(TAG,"onDeviceConnected");        }        @Override        public void onDfuProcessStarting(String deviceAddress) {            Log.e(TAG,"onDfuProcessStarting");        }        @Override        public void onDfuProcessStarted(String deviceAddress) {            Log.e(TAG,"onDfuProcessStarted");        }        @Override        public void onEnablingDfuMode(String deviceAddress) {            Log.e(TAG,"onEnablingDfuMode");        }        @Override        public void onProgressChanged(String deviceAddress, int percent, float speed, float avgSpeed, int currentPart, int partsTotal) {            textView_receive.setText("onProgressChanged = " + percent);            Log.e(TAG,"onProgressChanged = " + percent);            if(percent == 100){                KCTBluetoothService.isDFU = false;            }        }        @Override        public void onFirmwareValidating(String deviceAddress) {            Log.e(TAG,"onFirmwareValidating");        }        @Override        public void onDeviceDisconnecting(String deviceAddress) {            Log.e(TAG,"onDeviceDisconnecting");        }        @Override        public void onDeviceDisconnected(String deviceAddress) {            Log.e(TAG,"onDeviceDisconnected");        }        @Override        public void onDfuCompleted(String deviceAddress) {            Log.e(TAG,"onDfuCompleted");            KCTBluetoothService.isDFU = false;            textView_receive.setText("");        }        @Override        public void onDfuAborted(String deviceAddress) {            Log.e(TAG,"onDfuAborted");        }        @Override        public void onError(String deviceAddress, int error, int errorType, String message) {            Log.e(TAG,"onError");        }    };    private void sendFlash_data(int pack_Sum,int pack_index){        if(flash_data == null){            return;        }        Log.e(TAG,"pack_Sum = " + pack_Sum + " ; pack_remainder = " + pack_remainder + " ; pack_index = " + pack_index);        //当数据被20整除时        if(pack_Sum > pack_index) {            byte[] value = new byte[100];            System.arraycopy(flash_data,pack_index * 100,value,0,100);            KCTBluetoothManager.getInstance().sendCommand_a2d(BLEBluetoothManager.BLE_COMMAND_a2d_sendFlashData_pack(pack_Sum,pack_index,value));            textView_send.setText("FLASH发送:" + "\n" + "总包数 = " + pack_Sum + "\n" + "当前包数 = " + pack_index);        }else{            if(pack_remainder > 0){                byte[] value = new byte[pack_remainder];                System.arraycopy(flash_data,pack_index * 100,value,0,pack_remainder);                KCTBluetoothManager.getInstance().sendCommand_a2d(BLEBluetoothManager.BLE_COMMAND_a2d_sendFlashData_pack(pack_Sum,pack_index,value));                textView_send.setText("FLASH发送:" + "\n" + "总包数 = " + pack_Sum + "\n" + "当前包数 = " + pack_index);            }            flash_data = null;        }    }}